/**
 * Uitlizando biblioteca fastify
 * Podemos realizar metodos http
 * GET/ POST/ PUT/ DELETE
 * exemplo
 * http://localhost:3333/hello
 *
 * instalar tsx -D para autmatizar a buil de ts pra js
 * executar com npx tsx + arquivo.ts, utilizar somente em desenvolvimento
 *
 * Configurando eslint
 * npm i eslint @rocketseat/eslint-config -D / utilizado padrão da rocketseat, porem é facultativo
 * chat gpt salvou, deve add "rules": {"prettier/prettier": ["error", { "endOfLine": "auto" }]} no .eslintrc
 *
 * Banco de dados
 * kenx.js --> Para contrurir quarys
 * npm install knex sqlite3
 * criar arquivo de configuração para conexão com o banco de dados
 * Criar migrations --> Vercionamento do banco para que seja sempre atualizado para todos, semelhante ao git.
 * Adicionado ao script "knex": "node --no-warnings --loader tsx ./node_modules/knex/bin/cli.js",
 * Criar as queries na migrations
 * Rodar comando --> npm run knex -- migrate:latest
 * Uma migration em produção para todos da equipe não pode mais ser alterada, porem caso ainda não esteja ido a produção podemos fazer um rollback e alterar.
 * Rodar comando --> npm run knex -- migrate:rollback
 * Inserir dados na tabela via server.ts
 * .env
 * Criando arquivos .env, instalar npm install dotenv
 * import no arquivo e usar process.env+nome da chave
 * Como o arquivo .env nao sobe ao git, podemos criar um .env.exemplo apenas dizenedo que possui a variavel, porem nao atribuimos o valor a ela.
 * Zod --> npm install zod
 * Utilizando biblioteca zod para tratar dados, assim podemos trabalhar com nosso arquivos .env de forma global
 * Regras de negocio, requisitos funcionais
 * Plugins fastify para rocketseat
 * @types
 * Arquivo para tipagem de tabelas que tera no projeto
 * Cookies --> manter contextos entre requisições
 * Intalar pacotes npm i @fastify/cookie
 * Adicionar no server antes das rotas app.register(cookie);
 * Criar middleware para interceptar sessionId
 * Criar um handler global no server, assim nosso hanfler ficará disponivel para todas as rotas.
 * Testes
 * Tipos de teste:
 * Testes Unitarios --> Testa uma unidade da aplicação
 * Teste de integração --> Testa a comunicação entre duas ou mais unidades
 * Teste e2e --> Simulam um usuario operando na aplicação, no caso do backend nosso cliente é o frontend, exemplo um teste nas chamadas http.
 * Utilizando vitest --> npm install vitest -D
 * Instalando ferramenta supertest para não usar o servidor online --> npm i supertest -D
 */
